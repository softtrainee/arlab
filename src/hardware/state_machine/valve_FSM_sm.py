# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : valve_FSM.sm


# 
# Copyright (c) 2010 RossLabas 
# All rights reserved. 
# 
# Author: Jake Ross
#
#To compile the state map file (.sm) 
#
#java -jar /Path/to/Smc.jar -python /Path/to/state_map.sm
#
#see http://smc.sourceforge.net/SmcManual.htm


import statemap


class ValveState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Close(self, fsm):
        self.Default(fsm)

    def HardLockClose(self, fsm):
        self.Default(fsm)

    def HardLockOpen(self, fsm):
        self.Default(fsm)

    def HardUnLock(self, fsm):
        self.Default(fsm)

    def LockClose(self, fsm):
        self.Default(fsm)

    def LockOpen(self, fsm):
        self.Default(fsm)

    def Open(self, fsm):
        self.Default(fsm)

    def RClose(self, fsm):
        self.Default(fsm)

    def ROpen(self, fsm):
        self.Default(fsm)

    def UnLock(self, fsm):
        self.Default(fsm)

    def Unlock(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class ValveFSM_Default(ValveState):
    pass

class ValveFSM_Closed(ValveFSM_Default):

    def Close(self, fsm):
        # No actions.
        pass

    def HardLockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockClosed)
        fsm.getState().Entry(fsm)

    def HardLockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockOpened)
        fsm.getState().Entry(fsm)

    def HardUnLock(self, fsm):
        # No actions.
        pass

    def LockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.SoftLockClosed)
        fsm.getState().Entry(fsm)

    def LockOpen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._open_()
        finally:
            fsm.setState(ValveFSM.SoftLockOpened)
            fsm.getState().Entry(fsm)

    def Open(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._open_()
        finally:
            fsm.setState(ValveFSM.Opened)
            fsm.getState().Entry(fsm)

    def RClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Closed)
        fsm.getState().Entry(fsm)

    def ROpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Opened)
        fsm.getState().Entry(fsm)

    def Unlock(self, fsm):
        # No actions.
        pass

class ValveFSM_Opened(ValveFSM_Default):

    def Close(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._close_()
        finally:
            fsm.setState(ValveFSM.Closed)
            fsm.getState().Entry(fsm)

    def HardLockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockClosed)
        fsm.getState().Entry(fsm)

    def HardLockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockOpened)
        fsm.getState().Entry(fsm)

    def HardUnLock(self, fsm):
        # No actions.
        pass

    def LockClose(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._close_()
        finally:
            fsm.setState(ValveFSM.SoftLockClosed)
            fsm.getState().Entry(fsm)

    def LockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.SoftLockOpened)
        fsm.getState().Entry(fsm)

    def Open(self, fsm):
        # No actions.
        pass

    def RClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Closed)
        fsm.getState().Entry(fsm)

    def ROpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Opened)
        fsm.getState().Entry(fsm)

    def Unlock(self, fsm):
        # No actions.
        pass

class ValveFSM_SoftLockClosed(ValveFSM_Default):

    def Close(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error_('software lock enabled')
        finally:
            fsm.setState(endState)

    def HardLockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockClosed)
        fsm.getState().Entry(fsm)

    def HardLockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockOpened)
        fsm.getState().Entry(fsm)

    def HardUnLock(self, fsm):
        # No actions.
        pass

    def LockClose(self, fsm):
        # No actions.
        pass

    def LockOpen(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._close_()
        finally:
            fsm.setState(ValveFSM.SoftLockOpened)
            fsm.getState().Entry(fsm)

    def Open(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error_('software lock enabled')
        finally:
            fsm.setState(endState)

    def RClose(self, fsm):
        # No actions.
        pass

    def ROpen(self, fsm):
        # No actions.
        pass

    def Unlock(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Closed)
        fsm.getState().Entry(fsm)

class ValveFSM_SoftLockOpened(ValveFSM_Default):

    def Close(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error_('soft lock enabled')
        finally:
            fsm.setState(endState)

    def HardLockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockClosed)
        fsm.getState().Entry(fsm)

    def HardLockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockOpened)
        fsm.getState().Entry(fsm)

    def HardUnLock(self, fsm):
        # No actions.
        pass

    def LockClose(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt._close_()
        finally:
            fsm.setState(ValveFSM.SoftLockClosed)
            fsm.getState().Entry(fsm)

    def LockOpen(self, fsm):
        # No actions.
        pass

    def Open(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt._error_('soft lock enabled')
        finally:
            fsm.setState(endState)

    def RClose(self, fsm):
        # No actions.
        pass

    def ROpen(self, fsm):
        # No actions.
        pass

    def Unlock(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Opened)
        fsm.getState().Entry(fsm)

class ValveFSM_HardLockClosed(ValveFSM_Default):

    def Close(self, fsm):
        # No actions.
        pass

    def HardLockClose(self, fsm):
        # No actions.
        pass

    def HardLockOpen(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockOpened)
        fsm.getState().Entry(fsm)

    def HardUnLock(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Closed)
        fsm.getState().Entry(fsm)

    def LockClose(self, fsm):
        # No actions.
        pass

    def LockOpen(self, fsm):
        # No actions.
        pass

    def Open(self, fsm):
        # No actions.
        pass

    def UnLock(self, fsm):
        # No actions.
        pass

class ValveFSM_HardLockOpened(ValveFSM_Default):

    def Close(self, fsm):
        # No actions.
        pass

    def HardLockClose(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.HardLockClosed)
        fsm.getState().Entry(fsm)

    def HardLockOpen(self, fsm):
        # No actions.
        pass

    def HardUnLock(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(ValveFSM.Opened)
        fsm.getState().Entry(fsm)

    def LockClose(self, fsm):
        # No actions.
        pass

    def LockOpen(self, fsm):
        # No actions.
        pass

    def Open(self, fsm):
        # No actions.
        pass

    def UnLock(self, fsm):
        # No actions.
        pass

class ValveFSM(object):

    Closed = ValveFSM_Closed('ValveFSM.Closed', 0)
    Opened = ValveFSM_Opened('ValveFSM.Opened', 1)
    SoftLockClosed = ValveFSM_SoftLockClosed('ValveFSM.SoftLockClosed', 2)
    SoftLockOpened = ValveFSM_SoftLockOpened('ValveFSM.SoftLockOpened', 3)
    HardLockClosed = ValveFSM_HardLockClosed('ValveFSM.HardLockClosed', 4)
    HardLockOpened = ValveFSM_HardLockOpened('ValveFSM.HardLockOpened', 5)
    Default = ValveFSM_Default('ValveFSM.Default', -1)

class Valve_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, ValveFSM.Closed)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
